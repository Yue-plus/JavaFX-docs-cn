= Scene Graph

== Overview

A scene graph is a tree data structure that arranges (and groups) graphical objects for easier logical representation.
It also allows the graphics engine to render the objects in the most efficient way by
fully or partially skipping objects which will not be seen in the final image.
The following figure shows an example of the JavaFX scene graph architecture.

image::images/scenegraph/scene_graph.jpg[title="JavaFX Scene Graph"]

At the very top of the architecture there is a `Stage`.
A stage is a JavaFX representation of a native OS window.
At any given time a stage can have a single `Scene` attached to it.
A scene is a container for the JavaFX scene graph.

All elements in the JavaFX scene graph are represented as `Node` objects.
There are three types of nodes: root, branch and leaf.
The root node is the only node that does not have a parent
and is directly contained by a scene, which can be seen in the figure above.
The difference between a branch and a leaf is that a leaf node does not have children.

In the scene graph, many properties of a parent node are shared by children nodes.
For instance, a transformation or an event applied to a parent node will also be applied recursively to its children.
As such, a complex hierarchy of nodes can be viewed as a single node to simplify the programming model.
We will explore transformations and events in later sections.

An example of a "Hello World" scene graph can be seen in the figure below.

image::images/scenegraph/specific_scene_graph.jpg[title="Hello World Scene Graph"]

One possible implementation that will produce a scene graph matching the figure above
is as follows.

[source,java]
.HelloApp.class
----
public class HelloApp extends Application {

    private Parent createContent() {
        return new StackPane(new Text("Hello World"));
    }

    @Override
    public void start(Stage stage) throws Exception {
        stage.setScene(new Scene(createContent(), 300, 300));
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
----

The result of running the code is seen in the next figure.

image::images/scenegraph/hello_world.jpg[title="Hello World"]

Important notes:

* A node can have the maximum of 1 parent.
* A node in the "active" (attached to a currently visible scene) scene graph can only be modified from the JavaFX Application Thread.

== Transformations

We will use the following app as an example to demonstrate the 3 most common transformations.

[source,java]
.TransformApp.class
----
public class TransformApp extends Application {

    private Parent createContent() {
        Rectangle box = new Rectangle(100, 50, Color.BLUE);

        transform(box);

        return new Pane(box);
    }

    private void transform(Rectangle box) {
        // we will apply transformations here
    }

    @Override
    public void start(Stage stage) throws Exception {
        stage.setScene(new Scene(createContent(), 300, 300, Color.GRAY));
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
----

Running the application will result in the following image.

image::images/scenegraph/transform_base.jpg[title="Blue Box"]

In JavaFX, a simple transformation can happen in one of the 3 axes: X, Y or Z.
The example application is in 2D, so we will only consider X and Y axes.

=== Translate

In JavaFX and computer graphics, `translate` means move.
We can translate our box by 100 pixels in X axis and 200 pixels in Y axis.

[source,java]
----
private void transform(Rectangle box) {
    box.setTranslateX(100);
    box.setTranslateY(200);
}
----

image::images/scenegraph/transform_translate.jpg[title="Translate"]

=== Scale

You can apply scaling to make a node larger or smaller.
Scaling value is a ratio.
By default, a node has a scaling value of 1 (100%) in each axis.
We can enlarge our box by applying scaling of 1.5 in X and Y axes.

[source,java]
----
private void transform(Rectangle box) {
    // previous code
    
    box.setScaleX(1.5);
    box.setScaleY(1.5);
}
----

image::images/scenegraph/transform_scale.jpg[title="Scale"]

=== Rotate

A node's rotation determines the angle at which the node is rendered.
In 2D the only sensible rotation axis is the Z axis.
Let's rotate the box by 30 degrees.

[source,java]
----
private void transform(Rectangle box) {
    // previous code
    
    box.setRotate(30);
}
----

image::images/scenegraph/transform_rotate.jpg[title="Rotate"]

== Event Handling

An event notifies that something important has taken place.
Events are typically the "primitive" of an event system (aka event bus).
Generally, an event system has the following 3 responsibilities:

* `fire` (trigger) an event,
* notify `listeners` (interested parties) about the event and
* `handle` (process) the event.

The event notification mechanism is done by the JavaFX platform automatically.
Hence, we will only consider how to fire events, listen for events and how to handle them.

First, let's create a custom event.

[source,java]
----
public class UserEvent extends Event {

    public static final EventType<UserEvent> ANY = new EventType<>(Event.ANY, "ANY");

    public static final EventType<UserEvent> LOGIN_SUCCEEDED = new EventType<>(ANY, "LOGIN_SUCCEEDED");

    public static final EventType<UserEvent> LOGIN_FAILED = new EventType<>(ANY, "LOGIN_FAILED");

    public UserEvent(EventType<? extends Event> eventType) {
        super(eventType);
    }
    
    // any other fields of importance, e.g. data, timestamp
}
----

Since event types are fixed, they are usually created within the same source file as the event.
We can see that there are 2 specific types of events: `LOGIN_SUCCEEDED` and `LOGIN_FAILED`.
We can listen for such specific types of events:

[source,java]
----
Node node = ...
node.addEventHandler(UserEvent.LOGIN_SUCCEEDED, event -> {
    // handle event
});
----

Alternatively, we can handle any `UserEvent`:

[source,java]
----
Node node = ...
node.addEventHandler(UserEvent.ANY, event -> {
    // handle event
});
----

Finally, we are able to construct and fire our own events:

[source,java]
----
UserEvent event = new UserEvent(UserEvent.LOGIN_SUCCEEDED);
Node node = ...
node.fireEvent(event);
----

For example, `LOGIN_SUCCEEDED` or `LOGIN_FAILED` could be fired when a user attempts to log in to an app.
Depending on the login result we can allow the user access the app or lock him out of the app.
Whilst the same functionality can be achieved with a simple `if` statement,
there is one significant advantage of an event system.
Event systems were designed to enable communication between various modules (sub-systems) in
an application without tightly coupling them.
As such, a sound might be played by an audio system when the user logs in.
Thus, maintaining all audio related code in its own module.
However, we will not delve deeper into architectural styles.

=== Input Events

Key and mouse events are the most common types of events used in JavaFX.
Each `Node` provides so-called "convenience methods" for handling these events.
For instance, we can run some code when a button is pressed:

[source,java]
----
Button button = ...
button.setOnAction(event -> {
    // button was pressed
});
----

For more flexibility we can also use the following:

[source,java]
----
Button button = ...
button.setOnMouseEntered(e -> ...);
button.setOnMouseExited(e -> ...);
button.setOnMousePressed(e -> ...);
button.setOnMouseReleased(e -> ...);
----

The object `e` above is of type `MouseEvent` and can be queried to obtain various information about the event,
e.g. `x` and `y` positions, number of clicks, etc.
Finally, we can do the same with keys:

[source,java]
----
Button button = ...
button.setOnKeyPressed(e -> ...);
button.setOnKeyReleased(e -> ...);
----

The object `e` here is of type `KeyEvent` and it carries information about the key code, which can then be mapped
to a real physical key on the keyboard.

== Timing

It is important to understand the timing difference between the creation of JavaFX UI controls and the display of the controls.  When creating the UI controls -- either through direct API object creation or through FXML -- you may be missing certain screen geometry values such as the dimensions of a window.  That is available later, at the instant when the screen is shown to the user.  That showing event, called OnShown, is the time at which a window has been allocated and the final layout computations completed.

To demonstrate this, consider the following program which displays the screen dimensions while the UI controls are being created and the screen dimensions when the screen is shown.  The following screenshot shows the running of the program.  When the UI controls are being created (new VBox(), new Scene(), primaryStage.setScene()), there are no actual window height and width values available as evidenced by the undefined "NaN" values.

image::images/scenegraph/scenegraph_startvshown.png[title="Screen Geometry Not Available Before OnShown"]

However, the values for width and height are available once the window is shown.  The program registers an event handler for the OnShown event and prepares the same output.

The following is the Java class of the demonstration program.

[source,java]
.StartVsShownJavaFXApp.class
----
public class StartVsShownJavaFXApp extends Application {

    private DoubleProperty startX = new SimpleDoubleProperty();
    private DoubleProperty startY = new SimpleDoubleProperty();
    private DoubleProperty shownX = new SimpleDoubleProperty();
    private DoubleProperty shownY = new SimpleDoubleProperty();

    @Override
    public void start(Stage primaryStage) throws Exception {

        Label startLabel = new Label("Start Dimensions");
        TextField startTF = new TextField();
        startTF.textProperty().bind(
                Bindings.format("(%.1f, %.1f)", startX, startY)
        );

        Label shownLabel = new Label("Shown Dimensions");
        TextField shownTF = new TextField();
        shownTF.textProperty().bind(
                Bindings.format("(%.1f, %.1f)", shownX, shownY)
        );

        GridPane gp = new GridPane();
        gp.add( startLabel, 0, 0 );
        gp.add( startTF, 1, 0 );
        gp.add( shownLabel, 0, 1 );
        gp.add( shownTF, 1, 1 );
        gp.setHgap(10);
        gp.setVgap(10);

        HBox hbox = new HBox(gp);
        hbox.setAlignment(CENTER);

        VBox vbox = new VBox(hbox);
        vbox.setAlignment(CENTER);

        Scene scene = new Scene( vbox, 480, 320 );

        primaryStage.setScene( scene );

        // before show()...I just set this to 480x320, right?
        startX.set( primaryStage.getWidth() );
        startY.set( primaryStage.getHeight() );

        primaryStage.setOnShown( (evt) -> {
            shownX.set( primaryStage.getWidth() );
            shownY.set( primaryStage.getHeight() );  // all available now
        });

        primaryStage.setTitle("Start Vs. Shown");
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
----

Sometimes, you'll know the screen dimensions in advance and can use those values at any point in the JavaFX program.  This includes before the OnShown event.  However, if your initialization sequence contains logic that needs these values, you'll need to work with the OnShown event.  A use case might be working with the last saved dimensions or dimensions based on program input.

